{"version":3,"sources":["components/CharacterWise.jsx","components/DifficultyWise.jsx","components/TagWise.jsx","components/VerdictWise.jsx","components/RatingGraph.jsx","components/UserData.jsx","components/HeatMap.jsx","components/HandleData.jsx","components/InputHandle.js","components/Navbar.jsx","components/compare/Compare.js","components/compare/index.js","components/App.jsx","index.js"],"names":["CharacterWise","problemChar","console","log","colors","length","className","width","height","chartType","loader","data","options","title","chartArea","chart","subtitle","legend","position","bar","groupWidth","rootProps","DifficultyWise","problemDifficulty","TagWise","problemTags","handle","role","Object","keys","map","key","index","push","pieSliceText","pieHole","verdict","VerdictWise","props","problemVerdicts","term","color","is3D","slices","RatingGraph","userRatings","ratingData","slice","maxRating","i","newRating","FindMaxRating","maxRatingIndex","forEach","item","contestId","toString","pointSize","pointShape","UserData","contests","uniqueCorrectSubmission","allSubmissions","totalSubmissions","solvedProblems","tried","onOneSubmission","solved","problemDict","problem","name","problemNumbers","avgAttempts","toFixed","totalContests","maxUp","maxDown","bestRank","oldRating","rank","contestNumbers","noEndBorder","borderRight","style","timeConverter","UNIX_timestamp","a","Date","getFullYear","getMonth","getDate","HeatMap","type","id","years","dataDict","creationTimeSeconds","year","month","date","dt","getData","indexOf","colorAxis","minValue","maxValue","sortOnValues","dict","items","tempDict","sort","first","second","custom_compare","b","custom_compare_char","charCodeAt","MakeSubmissionUnique","submissions","tempSubmission","tempArray","submission","CharacterWiseProblem","found","DifficultyWiseProblem","rating","TagWiseProblem","problemTag","tags","tag","VerdictProblem","verdictWise","LanguageProblem","languageWise","programmingLanguage","HandleData","useState","errorSub","errorRating","isLoadedSubmission","isLoadedRating","uniqueCorrectSubmissions","problemLanguages","setData","useEffect","PROBLEM_URL","RATING_URL","headers","axios","get","res","result","uniqueSubmissions","res_rating","fetchData","InputHandle","setHandle","isSubmitted","formData","setFormData","placeholder","value","onChange","e","target","onClick","preventDefault","NavBar","href","data-toggle","data-target","submissionA","submissionB","handleA","handleB","Compare","dataA","setDataA","dataB","setDataB","InputTwoHandles","setHandleA","setHandleB","onSubmit","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1bf5b257.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\n//import { XYPlot, XAxis, YAxis, makeWidthFlexible, VerticalGridLines, HorizontalGridLines, LineSeries, MarkSeries, LineMarkSeries, VerticalBarSeries, HorizontalBarSeries } from 'react-vis';\nimport { Chart } from \"react-google-charts\";\n\nconst CharacterWise = ({ problemChar }) => {\n\n    console.log(\"In function Character wise\");\n\n    //var width = Math.floor((problemChar.length - 28) * (700 / 15) + 1500);\n    \n    const colors = problemChar[0].length < 3 ? ['rgb(2, 2, 140)'] : ['rgb(2, 2, 140)', 'rgb(0, 105, 11)'];\n\n    return (\n        <Fragment>\n            {problemChar && problemChar.length > 1 &&\n            <div className=\"character-graph\">\n                <Chart\n                    width={\"100%\"}\n                    height={'355px'}\n                    chartType=\"ColumnChart\"\n                    loader={<div>Loading Chart</div>}\n                    data={problemChar}\n                    options={{\n                        title: \"Problem Level\",\n                        chartArea: {\n                            width: '75%'\n                        },\n                        chart: {\n                            title: 'Difficulty wise problems',\n                            subtitle: 'The bars show to total no. of problems solved as per difficulty',\n                        },\n                        colors: colors,\n                        legend: { position: 'top' },\n                        bar: { groupWidth: \"55%\" },\n\n                    }}\n                    // For tests\n                    rootProps={{ 'data-testid': '2' }}\n                />\n            </div> \n            }\n        </Fragment>\n    );\n\n\n}\n\nexport default CharacterWise;","import React, { Fragment } from \"react\";\nimport { Chart } from \"react-google-charts\";\n\n\nconst DifficultyWise = ({ problemDifficulty }) => {\n\n    console.log(\"In function Difficulty wise\");\n\n    // var data = [[\"Level\", \"Solved\"]];\n    // Object.keys(problemDifficulty).map(function (key) {\n    //     data.push([key, problemDifficulty[key]]);\n    // });\n\n    const colors = problemDifficulty[0].length < 3 ? ['rgb(2, 2, 140)'] : ['rgb(2, 2, 140)', 'rgb(0, 105, 11)'];\n    const groupWidth = problemDifficulty[0].length < 3 ? \"55%\" : \"75%\";\n\n    console.log(problemDifficulty)\n    //var width = Math.floor( 1500 + (problemDifficulty.length - 28) * (700 / 15));\n    //var width = 1500;\n    //console.log(Math.floor( 1500 - (data.length - 28) * (700 / 15)));\n    //console.log($(\".to-get-width\").width());\n    return (<Fragment>\n        {problemDifficulty && problemDifficulty.length > 1 &&\n            <div className=\"difficulty-chart\">\n                <Chart\n                    width={\"100%\"}\n                    height={'355px'}\n                    chartType=\"ColumnChart\"\n                    loader={<div>Loading Chart</div>}\n                    data={problemDifficulty}\n                    options={{\n                        title: \"Problems Difficulty\",\n                        chartArea: {\n                            width: '75%'\n                        },\n                        chart: {\n                            title: 'Difficulty wise problems',\n                            subtitle: 'The bars show to total no. of problems solved as per difficulty',\n                        },\n                        colors: colors,\n                        legend: { position: 'top' },\n                        bar: { groupWidth: \"75%\" },\n\n                    }}\n                    // For tests\n                    rootProps={{ 'data-testid': '2' }}\n                />\n            </div>}\n    </Fragment>\n    );\n}\n\nexport default DifficultyWise;","import React, { Fragment } from \"react\";\n\nimport { Chart } from \"react-google-charts\";\n\nconst TagWise = ({ problemTags, handle }) => {\n\n    console.log(\"In function Tag wise\", handle);\n\n    var data = [[\"Tags\", \"Solved problems\", { role: \"style\" }]];\n    Object.keys(problemTags).map(function (key, index) {\n        return data.push([key, problemTags[key], '#b87333']);\n    });\n\n    //data = [data[0], data.slice(1,).reverse()];\n\n    return (\n        <Fragment>\n            {data.length > 1 &&\n                <div className=\"tag-graph\">\n                    <Chart\n                        width={'100%'}\n                        height={'400px'}\n                        chartType=\"PieChart\"\n                        loader={<div>Loading Chart</div>}\n                        data={data}\n                        options={{\n                            title: `Problem Tags of ${handle}`,\n                            pieSliceText: 'none',\n                            pieHole: 0.5,\n                        }}\n                        // For tests\n                        rootProps={{ 'data-testid': '1' }}\n                    />\n\n                </div>}\n        </Fragment>\n    );\n}\n\nexport default TagWise;","import React, { Fragment } from \"react\";\nimport { Chart } from \"react-google-charts\";\n\nconst verdict = {\n    \"OK\": {\n        \"term\": \"Accepted\",\n        \"color\": \"#207d1a\"\n    },\n    \"TIME_LIMIT_EXCEEDED\": {\n        \"term\": \"TLE\",\n        \"color\": \"#eb540e\"\n    },\n    \"MEMORY_LIMIT_EXCEEDED\": {\n        \"term\": \"MLE\",\n        \"color\": \"#2c4a94\"\n    },\n    \"IDLENESS_LIMIT_EXCEEDED\": {\n        \"term\": \"IDLE\",\n        \"color\": \"#0c827c\"\n    },\n    \"RUNTIME_ERROR\": {\n        \"term\": \"Runtime error\",\n        \"color\": \"#d6660b\"\n    },\n    \"COMPILATION_ERROR\": {\n        \"term\": \"Compilation Error\",\n        \"color\": \"#d2e038\"\n    },\n    \"WRONG_ANSWER\": {\n        \"term\": \"Wrong Answer\",\n        \"color\": \"#d90b0b\"\n    }\n};\n\nfunction VerdictWise(props) {\n    var data = [[\"Tags\", \"Solved problems\"]];\n    var colors = [];\n    Object.keys(props.problemVerdicts).map(function (key, index) {\n        if (key in verdict) {\n            data.push([verdict[key].term, props.problemVerdicts[key]]);\n            colors.push({ color: verdict[key].color });\n        }\n        return null\n    });\n\n    return (\n        <Fragment>\n            {data.length > 1 &&\n                <div className=\"verdict-graph\">\n                    <Chart\n                        width={'100%'}\n                        height={'400px'}\n                        chartType=\"PieChart\"\n                        loader={<div>Loading Chart</div>}\n                        data={data}\n                        options={{\n                            legend: 'none',\n                            title: `Problem Verdicts of ${props.handle}`,\n                            is3D: true,\n                            slices: colors\n                        }}\n                        rootProps={{ 'data-testid': '1' }}\n                    />\n                </div>\n            }\n        </Fragment>\n    );\n}\n\nexport default VerdictWise;\n\n","import React, { Fragment } from 'react';\nimport { Chart } from 'react-google-charts';\n\n\nfunction FindMaxRating(data) {\n    var index = 0;\n    var maxRating = 0;\n    for (var i = 0; i < data.length; i++) {\n        if (maxRating < data[i].newRating) {\n            maxRating = data[i].newRating\n            index = i;\n        }\n    }\n    return [maxRating, index];\n}\n\nconst RatingGraph = ({ userRatings }) => {\n\n    console.log(\"In function Rating graph\");\n\n    var ratingData = userRatings.slice(-100,);\n    var data = [[\"x\", \"Rating\", { 'type': 'string', 'role': 'style' }]];\n\n    var [, maxRatingIndex] = FindMaxRating(ratingData);\n    var i = 0;\n\n    //console.log(maxRating, maxRatingIndex);\n\n    ratingData.forEach(function (item) {\n        if (i === maxRatingIndex) {\n            data.push([item.contestId.toString(), item.newRating, 'point { size: 4; fill-color: #0a0a0a; }']);\n        } else {\n            data.push([item.contestId.toString(), item.newRating, null]);\n        }\n        i += 1;\n    });\n\n    var title = \"Contest rating in last \" + ratingData.length + \" contests\";\n    return (\n        <Fragment>\n            {data.length > 1 ?\n                <div className=\"rating-graph\">\n                    <Chart\n                        width={'100%'}\n                        height={'300px'}\n                        chartType=\"LineChart\"\n                        loader={<div>Loading Chart</div>}\n                        data={data}\n                        options={{\n                            title: title,\n                            // hAxis: {\n                            //     title: 'ContestID',\n                            // },\n                            // vAxis: {\n                            //     title: 'Rating',\n                            // },\n                            pointSize: 4,\n                            pointShape: \"circle\",\n                            colors: [\"rgb(2, 2, 140)\"],\n                            legend: { position: 'none' },\n                        }}\n                        rootProps={{ 'data-testid': '1' }}\n                    />\n                </div> :\n                <div className=\"upper-margin lower-margin\">No Contest given by this user</div>\n            }\n        </Fragment>\n        //}\n    );\n}\n\nexport default RatingGraph;","import React from \"react\";\n\nfunction contestNumbers(contests) {\n    var maxUp = 0;\n    var maxDown = 0;\n    var bestRank = 200000000;\n\n    for (var i = 0; i < contests.length; i++) {\n        if (i !== 0) {\n            if (contests[i].newRating - contests[i].oldRating > maxUp) {\n                maxUp = contests[i].newRating - contests[i].oldRating;\n            }\n            if (-contests[i].newRating + contests[i].oldRating > maxDown) {\n                maxDown = -contests[i].newRating + contests[i].oldRating;\n            }\n            if (bestRank > contests[i].rank) {\n                bestRank = contests[i].rank\n            }\n        }\n    }\n    if (bestRank === 200000000) { \n        bestRank = \"None\";\n        maxDown = \"None\"\n        maxUp = \"None\" \n    }\n    return [maxUp, maxDown, bestRank];\n}\n\n\nfunction problemNumbers(data) {\n    var tried = 0;\n    var onOneSubmission = 0;\n    var solved = 0;\n\n    var problemDict = {};\n\n    for (var i = 0; i < data.length; i++) {\n        if (data[i].problem.name in problemDict) {\n            problemDict[data[i].problem.name].tried++;\n            if (data[i].verdict === \"OK\") {\n                problemDict[data[i].problem.name].solved++;\n            }\n\n        } else {\n            problemDict[data[i].problem.name] = {\n                \"tried\": 1,\n                \"solved\": 0,\n            }\n            if (data[i].verdict === \"OK\") {\n                problemDict[data[i].problem.name].solved++;\n            }\n        }\n    }\n\n    Object.keys(problemDict).forEach(function (item) {\n        tried++;\n        if (problemDict[item].solved !== 0) {\n            solved++;\n        }\n        if (problemDict[item].solved === problemDict[item].tried) {\n            onOneSubmission++;\n        }\n    });\n\n    return [tried, solved, onOneSubmission];\n}\n\n\nfunction UserData({ contests, uniqueCorrectSubmission, allSubmissions }) {\n\n    console.log(\"In function userdata\");\n\n    if (!contests) {\n        return (<p>No Contests!!</p>)\n    }\n\n    var totalSubmissions = allSubmissions.length;\n    var solvedProblems = uniqueCorrectSubmission.length;\n\n    var [tried, solved, onOneSubmission] = problemNumbers(allSubmissions)\n\n\n    var avgAttempts = solvedProblems ? (totalSubmissions / solvedProblems).toFixed(2) : 0;\n\n    var totalContests = contests.length;\n    var [maxUp, maxDown, bestRank] = contestNumbers(contests);\n\n    const noEndBorder = { borderRight: \"none\" };\n\n    return (\n        <div className=\"user-data\">\n            <div className=\"row\">\n                <div className=\"col-lg-3\">\n                    <p>Tried: {tried}</p>\n                </div>\n                <div className=\"col-lg-3\">\n                    <p>Solved: {solved}</p>\n                </div>\n                <div className=\"col-lg-3\">\n                    <p>Avg submissions: {avgAttempts}</p>\n                </div>\n                <div className=\"col-lg-3\" style={noEndBorder}>\n                    <p>At 1st submission: {onOneSubmission}</p>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-lg-3\">\n                    <p>Total Contests: {totalContests}</p>\n                </div>\n                <div className=\"col-lg-3\">\n                    <p>Max Up: {maxUp}</p>\n                </div>\n                <div className=\"col-lg-3\">\n                    <p>Max Down: {maxDown}</p>\n                </div>\n                <div className=\"col-lg-3\" style={noEndBorder}>\n                    <p>Best Rank: {bestRank}</p>\n                </div>\n            </div>\n        </div>\n    );\n\n\n\n}\n\nexport default UserData;","import React, { Fragment } from \"react\";\nimport { Chart } from \"react-google-charts\";\n\nfunction timeConverter(UNIX_timestamp) {\n    var a = new Date(UNIX_timestamp * 1000);\n    var year = a.getFullYear();\n    var month = a.getMonth();\n    var date = a.getDate();\n    return [year, month, date];\n}\n\nfunction getData(data) {\n    var dataDict = {};\n\n    for (var i = 0; i < data.length; i++) {\n        var [year, month, date] = timeConverter(data[i].creationTimeSeconds);\n        var dated = new Date(year, month, date);\n        var dt = dated.toString();\n\n        if (dt in dataDict) {\n            dataDict[dt] += 1;\n        } else {\n            dataDict[dt] = 1;\n        }\n    }\n\n    return Object.keys(dataDict).map(function (key) {\n        var dt = new Date(key);\n        return [dt, dataDict[key]];\n    });\n}\n\nfunction HeatMap({ allSubmissions }) {\n\n    console.log(\"In function Heatmap\");\n\n    var data = [[{ type: 'date', id: 'Date' }, { type: 'number', id: 'Won/Loss' }]];\n    var years = [];\n    data.push(...getData(allSubmissions));\n    for (var i = 1; i < data.length; i++) {\n        if (years.indexOf(data[i][0].getFullYear()) === -1) {\n            years.push(data[i][0].getFullYear());\n        }\n    }\n    var height = (30 + 150 * years.length);\n\n    return (\n        <Fragment>\n            {data.length > 1 &&\n                <div className=\"heatmap\">\n                    <Chart\n                        width={\"100%\"}\n                        height={height}\n                        chartType=\"Calendar\"\n                        loader={<div>Loading Chart</div>}\n                        data={data}\n                        options={{\n                            title: 'Submission Heatmap',\n                            colorAxis: { minValue: 0, maxValue: \"#032052\", colors: ['#ffffff', '#0027ff', '#00127d'] }\n                        }}\n                        rootProps={{ 'data-testid': '1' }}\n                    />\n                </div>}\n        </Fragment>\n    );\n}\n\nexport default HeatMap;","import React, { useState, useEffect, Fragment } from 'react';\nimport CharacterWise from './CharacterWise';\nimport DifficultyWise from \"./DifficultyWise\";\nimport TagWise from \"./TagWise\";\nimport VerdictWise from \"./VerdictWise\";\n//import LanguageWise from \"./LanguageWise\";\nimport RatingGraph from \"./RatingGraph\";\nimport UserData from \"./UserData\";\nimport HeatMap from \"./HeatMap\"\nimport axios from \"axios\"\n\n//Sort a dictionery on values\nfunction sortOnValues(dict) {\n    var items = Object.keys(dict).map(function (key) {\n        return [key, dict[key]];\n    });\n    var tempDict = {};\n    // Sort the array based on the second element\n    items.sort(function (first, second) {\n        return second[1] - first[1];\n    });\n\n    items.forEach(function (item) {\n        tempDict[item[0]] = item[1];\n    });\n    return tempDict;\n}\n\n//Compare function to sort\nfunction custom_compare(a, b) {\n    return a[0] - b[0];\n}\n\n//Compare function to sort an array of characters\nfunction custom_compare_char(a, b) {\n    return a[0].charCodeAt(0) - b[0].charCodeAt(0);\n}\n\n//Get all unique correct submissions\nfunction MakeSubmissionUnique(submissions) {\n    var tempSubmission = [];\n    var tempArray = [];\n\n    submissions.forEach(function (submission) {\n        if (submission.verdict === \"OK\") {\n            if (tempArray.indexOf(submission.problem.name) === -1) {\n                tempSubmission.push(submission);\n                tempArray.push(submission.problem.name);\n            }\n        }\n    });\n    return tempSubmission;\n}\n\n//Get a dictionery of number of problems by A, B, C, D....\nfunction CharacterWiseProblem(submissions) {\n\n    var data = [];\n    submissions.forEach((submission) => {\n        if (submission.problem.index) {\n            var found = false\n            for (var i = 0; i < data.length; i += 1) {\n                if (data[i][0] === submission.problem.index[0]) {\n                    data[i][1] += 1\n                    found = true\n                }\n            }\n            if (!found) {\n                data.push([submission.problem.index[0], 1])\n            }\n        }\n    });\n    //console.log(data)\n    return [[\"Level\", \"Solved\"], ...data.sort(custom_compare_char)];\n}\n\n//Get a dictionery of number of problems by problem rating\nfunction DifficultyWiseProblem(submissions) {\n    var data = [];\n    submissions.forEach((submission) => {\n        if (submission.problem.rating) {\n            var found = false\n            for (var i = 0; i < data.length; i += 1) {\n                if (data[i][0] === submission.problem.rating) {\n                    data[i][1] += 1\n                    found = true\n                }\n            }\n            if (!found) {\n                data.push([submission.problem.rating, 1])\n            }\n        }\n    });\n    //console.log(data)\n    return [[\"Level\", \"Solved\"], ...data.sort(custom_compare)];\n}\n\n\n//Get a dictionary of number of problems according to tags\nfunction TagWiseProblem(submissions) {\n    var problemTag = {};\n    submissions.forEach(function (submission) {\n        submission.problem.tags.forEach(function (tag) {\n            if (tag in problemTag) {\n                problemTag[tag] += 1;\n            } else {\n                problemTag[tag] = 1;\n            }\n        });\n    });\n    return sortOnValues(problemTag);\n}\n\n//Get num of problems according to verdict\nfunction VerdictProblem(submissions) {\n    var verdictWise = {};\n    submissions.forEach(function (submission) {\n        if (submission.verdict in verdictWise) {\n            verdictWise[submission.verdict] += 1;\n        } else {\n            verdictWise[submission.verdict] = 1;\n        }\n    });\n    return verdictWise;\n}\n\n//Get num of problems according to language used\nfunction LanguageProblem(submissions) {\n    var languageWise = {};\n    submissions.forEach(function (submission) {\n        if (submission.programmingLanguage in languageWise) {\n            languageWise[submission.programmingLanguage] += 1;\n        } else {\n            languageWise[submission.programmingLanguage] = 1;\n        }\n    });\n    return sortOnValues(languageWise);\n}\n\nconst HandleData = ({ handle }) => {\n\n    console.log(\"In function Handle \", handle);\n\n    const [data, setData] = useState({\n        errorSub: null,\n        errorRating: null,\n\n        isLoadedSubmission: false,\n        isLoadedRating: false,\n\n        allSubmissions: null,\n        uniqueCorrectSubmissions: null,\n        totalSubmissions: 0,\n        problemChar: null,\n        problemDifficulty: null,\n        problemTags: null,\n        problemVerdicts: null,\n        problemLanguages: null,\n        userRatings: null\n    });\n\n    useEffect(() => {\n\n\n        var PROBLEM_URL = \"https://codeforces.com/api/user.status?handle=\" + handle + \"&from=1&count=10000\";\n        var RATING_URL = \"https://codeforces.com/api/user.rating?handle=\" + handle;\n\n        setData({\n            errorSub: null,\n            errorRating: null,\n            isLoadedSubmission: false,\n            isLoadedRating: false,\n\n            allSubmissions: null,\n            uniqueCorrectSubmissions: null,\n            totalSubmissions: 0,\n            problemChar: null,\n            problemDifficulty: null,\n            problemTags: null,\n            problemVerdicts: null,\n            problemLanguages: null,\n            userRatings: null\n        })\n        const fetchData = async () => {\n            try {\n                const headers = {\n                    \"Content-Type\": \"application/json\"\n                }\n                const res = await axios.get(PROBLEM_URL, headers)\n                const allSubmissions = res.data.result\n                const uniqueSubmissions = MakeSubmissionUnique(allSubmissions)\n\n                const res_rating = await axios.get(RATING_URL, headers)\n                const userRatings = res_rating.data.result\n                setData(data => {\n                    return {\n                        ...data,\n                        errorSub: null,\n                        errorRating: null,\n                        isLoadedSubmission: true,\n                        isLoadedRating: true,\n\n                        totalSubmissions: allSubmissions.length,\n                        allSubmissions: allSubmissions,\n\n                        uniqueCorrectSubmissions: uniqueSubmissions,\n                        problemChar: CharacterWiseProblem(uniqueSubmissions),\n                        problemDifficulty: DifficultyWiseProblem(uniqueSubmissions),\n                        problemTags: TagWiseProblem(uniqueSubmissions),\n                        problemVerdicts: VerdictProblem(allSubmissions),\n                        problemLanguages: LanguageProblem(allSubmissions),\n\n                        userRatings: userRatings\n                    }\n                })\n            } catch (err) {\n                console.log(\"Not found\")\n                setData({\n                    ...data,\n                    errorSub: true,\n                    errorRating: true\n                })\n            }\n        }\n        fetchData()\n\n    }, [handle])\n\n    const {\n        errorSub,\n        errorRating,\n        isLoadedSubmission,\n        isLoadedRating,\n\n        allSubmissions,\n        uniqueCorrectSubmissions,\n        totalSubmissions,\n        problemChar,\n        problemDifficulty,\n        problemTags,\n        problemVerdicts,\n        //problemLanguages,\n        userRatings\n    } = data\n\n\n    if (errorSub || errorRating) {\n        return <div className=\"upper-margin\">Error: Not Found</div>;\n    } else if (!(isLoadedSubmission && isLoadedRating)) {\n        return <div className=\"upper-margin\">Loading...</div>;\n    } else {\n        return (\n            <Fragment>\n                {totalSubmissions > 0 ?\n                    <Fragment>\n                        <div className=\"upper-margin\">CF Performance of {handle}</div>\n                        <div>\n                            <UserData\n                                contests={userRatings}\n                                allSubmissions={allSubmissions}\n                                uniqueCorrectSubmission={uniqueCorrectSubmissions}\n                            />\n                            <RatingGraph\n                                totalSubmissions={totalSubmissions}\n                                userRatings={userRatings}\n                            />\n                            <CharacterWise\n                                totalSubmissions={totalSubmissions}\n                                problemChar={problemChar}\n                            />\n                            <DifficultyWise\n                                totalSubmissions={totalSubmissions}\n                                problemDifficulty={problemDifficulty}\n                            />\n\n                            <div className=\"row\">\n                                <div className=\"col-lg-5 col-12\">\n                                    <VerdictWise\n                                        handle={handle}\n                                        problemVerdicts={problemVerdicts}\n                                    />\n                                </div>\n                                <div className=\"col-lg-7 col-12\">\n                                    <TagWise\n                                        handle={handle}\n                                        problemTags={problemTags}\n                                    />\n                                </div>\n                            </div>\n                            <HeatMap allSubmissions={allSubmissions} />\n                        </div>\n                    </Fragment> :\n                    <div className=\"upper-margin\">No problems solved by {handle} yet.</div>\n                }\n            </Fragment>\n        );\n    }\n}\n\nexport default HandleData;","import React, { useState } from \"react\";\nimport HandleData from \"./HandleData\";\n\nexport const InputHandle = () => {\n  console.log(\"In handle Input\")\n\n  const [handle, setHandle] = useState(\"\");\n  const [formData, setFormData] = useState({\n    handle: \"\",\n    isSubmitted: false\n  });\n\n  const onChange = e => {\n    setHandle(e.target.value)\n  }\n  const onSubmit = e => {\n    e.preventDefault()\n    setFormData({\n      handle: handle,\n      isSubmitted: true\n    }, console.log(\"Submitted\"))\n  }\n  //console.log(formData, handle)\n  return (\n    <div>\n      <form className=\"form-inline\">\n        <div className=\"form-group\">\n          <input type=\"text\" className=\"form-control\" name=\"handle\" placeholder=\"handle\" value={handle} onChange={e => onChange(e)} />\n        </div>\n        <button type=\"submit\" className=\"btn btn-dark\" onClick={onSubmit}>Submit</button>\n      </form>\n      {/* {<HandleData handle={\"saransh\"} />} */}\n      {formData.isSubmitted && <HandleData handle={formData.handle} />}\n      {!formData.isSubmitted && <div className=\"upper-margin\">Enter your handle to visualize</div>}\n    </div>\n  );\n\n}","import React from \"react\";\n\nfunction NavBar() {\n    return (\n        <nav className=\"navbar navbar-expand-md bg-dark navbar-dark\">\n\n            <a className=\"navbar-brand\" href=\"/\">Track CF Performance</a>\n\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavbar\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n\n            <div className=\"navbar-links collapse navbar-collapse\" id=\"collapsibleNavbar\">\n                <ul className=\"navbar-nav\">\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"/\">HOME</a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"/compare\">COMPARE</a>\n                    </li>\n                    {/* <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"/problems\">PROBLEMS</a>\n                    </li> */}\n                </ul>\n            </div>\n        </nav>\n    );\n}\n\nexport default NavBar;","import React, { useState, useEffect, Fragment } from 'react';\nimport CharacterWise from '../CharacterWise';\nimport DifficultyWise from \"../DifficultyWise\";\nimport TagWise from \"../TagWise\";\nimport VerdictWise from \"../VerdictWise\";\n// //import LanguageWise from \"./LanguageWise\";\n// import RatingGraph from \"../RatingGraph\";\n// import UserData from \"../UserData\";\n// import HeatMap from \"../HeatMap\"\nimport axios from \"axios\"\n\n// //Sort a dictionery on values\nfunction sortOnValues(dict) {\n    var items = Object.keys(dict).map(function (key) {\n        return [key, dict[key]];\n    });\n    var tempDict = {};\n    // Sort the array based on the second element\n    items.sort(function (first, second) {\n        return second[1] - first[1];\n    });\n\n    items.forEach(function (item) {\n        tempDict[item[0]] = item[1];\n    });\n    return tempDict;\n}\n\n// //Compare function to sort\nfunction custom_compare(a, b) {\n    return a[0] - b[0];\n}\n\n// //Compare function to sort an array of characters\nfunction custom_compare_char(a, b) {\n    return a[0].charCodeAt(0) - b[0].charCodeAt(0);\n}\n\n// //Get all unique correct submissions\nfunction MakeSubmissionUnique(submissions) {\n    var tempSubmission = [];\n    var tempArray = [];\n\n    submissions.forEach(function (submission) {\n        if (submission.verdict === \"OK\") {\n            if (tempArray.indexOf(submission.problem.name) === -1) {\n                tempSubmission.push(submission);\n                tempArray.push(submission.problem.name);\n            }\n        }\n    });\n    return tempSubmission;\n}\n\n// //Get a dictionery of number of problems by A, B, C, D....\nfunction CharacterWiseProblem(submissionA, submissionB, handleA, handleB) {\n\n    var data = [];\n    submissionA.forEach((submission) => {\n        if (submission.problem.index) {\n            var found = false\n            for (var i = 0; i < data.length; i += 1) {\n                if (data[i][0] === submission.problem.index[0]) {\n                    data[i][1] += 1\n                    found = true\n                }\n            }\n            if (!found) {\n                data.push([submission.problem.index[0], 1, 0])\n            }\n        }\n    });\n    submissionB.forEach((submission) => {\n        if (submission.problem.index) {\n            var found = false\n            for (var i = 0; i < data.length; i += 1) {\n                if (data[i][0] === submission.problem.index[0]) {\n                    data[i][2] += 1\n                    found = true\n                }\n            }\n            if (!found) {\n                data.push([submission.problem.index[0], 0, 1])\n            }\n        }\n    });\n    //console.log(data)\n    return [[\"Level\", `${handleA}`, `${handleB}`], ...data.sort(custom_compare_char)];\n}\n\n// //Get a dictionery of number of problems by problem rating\nfunction DifficultyWiseProblem(submissionA, submissionB, handleA, handleB) {\n    var data = [];\n    submissionA.forEach((submission) => {\n        if (submission.problem.rating) {\n            var found = false\n            for (var i = 0; i < data.length; i += 1) {\n                if (data[i][0] === submission.problem.rating) {\n                    data[i][1] += 1\n                    found = true\n                }\n            }\n            if (!found) {\n                data.push([submission.problem.rating, 1, 0])\n            }\n        }\n    });\n    submissionB.forEach((submission) => {\n        if (submission.problem.rating) {\n            var found = false\n            for (var i = 0; i < data.length; i += 1) {\n                if (data[i][0] === submission.problem.rating) {\n                    data[i][2] += 1\n                    found = true\n                }\n            }\n            if (!found) {\n                data.push([submission.problem.rating, 0, 1])\n            }\n        }\n    });\n    //console.log(data)\n    return [[\"Level\", `${handleA}`, `${handleB}`], ...data.sort(custom_compare)];\n}\n\n\n// //Get a dictionary of number of problems according to tags\nfunction TagWiseProblem(submissions) {\n    var problemTag = {};\n    submissions.forEach(function (submission) {\n        submission.problem.tags.forEach(function (tag) {\n            if (tag in problemTag) {\n                problemTag[tag] += 1;\n            } else {\n                problemTag[tag] = 1;\n            }\n        });\n    });\n    return sortOnValues(problemTag);\n}\n\n// //Get num of problems according to verdict\nfunction VerdictProblem(submissions) {\n    var verdictWise = {};\n    submissions.forEach(function (submission) {\n        if (submission.verdict in verdictWise) {\n            verdictWise[submission.verdict] += 1;\n        } else {\n            verdictWise[submission.verdict] = 1;\n        }\n    });\n    return verdictWise;\n}\n\n// //Get num of problems according to language used\nfunction LanguageProblem(submissions) {\n    var languageWise = {};\n    submissions.forEach(function (submission) {\n        if (submission.programmingLanguage in languageWise) {\n            languageWise[submission.programmingLanguage] += 1;\n        } else {\n            languageWise[submission.programmingLanguage] = 1;\n        }\n    });\n    return sortOnValues(languageWise);\n}\n\nconst Compare = ({ handleA, handleB }) => {\n\n    console.log(\"In function Handle \", handleA, handleB);\n\n    const [dataA, setDataA] = useState({\n        errorSub: null,\n        errorRating: null,\n\n        isLoadedSubmission: false,\n        isLoadedRating: false,\n\n        allSubmissions: null,\n        uniqueCorrectSubmissions: null,\n        totalSubmissions: 0,\n        problemTags: null,\n        problemVerdicts: null,\n        problemLanguages: null,\n        userRatings: null\n    });\n\n    const [dataB, setDataB] = useState({\n        errorSub: null,\n        errorRating: null,\n\n        isLoadedSubmission: false,\n        isLoadedRating: false,\n\n        allSubmissions: null,\n        uniqueCorrectSubmissions: null,\n        totalSubmissions: 0,\n        problemTags: null,\n        problemVerdicts: null,\n        problemLanguages: null,\n        userRatings: null\n    });\n\n    useEffect(() => {\n\n        setDataA({\n            errorSub: null,\n            errorRating: null,\n            isLoadedSubmission: false,\n            isLoadedRating: false,\n\n            allSubmissions: null,\n            uniqueCorrectSubmissions: null,\n            totalSubmissions: 0,\n            problemTags: null,\n            problemVerdicts: null,\n            problemLanguages: null,\n            userRatings: null\n        });\n        setDataB({\n            errorSub: null,\n            errorRating: null,\n            isLoadedSubmission: false,\n            isLoadedRating: false,\n\n            allSubmissions: null,\n            uniqueCorrectSubmissions: null,\n            totalSubmissions: 0,\n            problemTags: null,\n            problemVerdicts: null,\n            problemLanguages: null,\n            userRatings: null\n        });\n\n        const fetchData = async (handle, data, setData) => {\n            try {\n\n                var PROBLEM_URL = \"https://codeforces.com/api/user.status?handle=\" + handle + \"&from=1&count=10000\";\n                var RATING_URL = \"https://codeforces.com/api/user.rating?handle=\" + handle;\n\n                const headers = {\n                    \"Content-Type\": \"application/json\"\n                }\n                const res = await axios.get(PROBLEM_URL, headers)\n                const allSubmissions = res.data.result\n                const uniqueSubmissions = MakeSubmissionUnique(allSubmissions)\n\n                const res_rating = await axios.get(RATING_URL, headers)\n                const userRatings = res_rating.data.result\n                setData(data => {\n                    return {\n                        ...data,\n                        errorSub: null,\n                        errorRating: null,\n                        isLoadedSubmission: true,\n                        isLoadedRating: true,\n\n                        totalSubmissions: allSubmissions.length,\n                        allSubmissions: allSubmissions,\n\n                        uniqueCorrectSubmissions: uniqueSubmissions,\n                        problemTags: TagWiseProblem(uniqueSubmissions),\n                        problemVerdicts: VerdictProblem(allSubmissions),\n                        problemLanguages: LanguageProblem(allSubmissions),\n\n                        userRatings: userRatings\n                    }\n                })\n            } catch (err) {\n                console.log(\"Not found\")\n                setData(data => {\n                    return {\n                        ...data,\n                        errorSub: true,\n                        errorRating: true\n                    }\n                })\n            }\n        }\n        setDataA(fetchData(handleA, dataA, setDataA));\n        setDataB(fetchData(handleB, dataB, setDataB));\n\n    }, [handleA, handleB])\n    console.log(dataA, dataB)\n\n\n    if (dataA.errorSub || dataA.errorRating || dataB.errorSub || dataB.errorRating) {\n        return <div className=\"upper-margin\">Error: Not Found</div>;\n    } else if (!(dataA.isLoadedSubmission && dataA.isLoadedRating && dataB.isLoadedSubmission && dataB.isLoadedRating)) {\n        return <div className=\"upper-margin\">Loading...</div>;\n    } else {\n        return (\n            <Fragment >\n                <div className=\"compare\">\n                    <div>\n                        {/* <UserData\n                                contests={userRatings}\n                                allSubmissions={allSubmissions}\n                                uniqueCorrectSubmission={uniqueCorrectSubmissions}\n                            />\n                            <RatingGraph\n                                totalSubmissions={totalSubmissions}\n                                userRatings={userRatings}\n                            />\n                            \n                            <DifficultyWise\n                                totalSubmissions={totalSubmissions}\n                                problemDifficulty={problemDifficulty}\n                            /> */}\n\n\n                        <div className=\"row\">\n                            <div className=\"col-lg-6 col-12\">\n                                <VerdictWise\n                                    handle={handleA}\n                                    problemVerdicts={dataA.problemVerdicts}\n                                />\n                            </div>\n                            <div className=\"col-lg-6 col-12\">\n                                <VerdictWise\n                                    handle={handleB}\n                                    problemVerdicts={dataB.problemVerdicts}\n                                />\n                            </div>\n\n                        </div>\n\n                        <CharacterWise\n                            problemChar={CharacterWiseProblem(dataA.uniqueCorrectSubmissions, dataB.uniqueCorrectSubmissions, handleA, handleB)}\n                        />\n\n                        <div className=\"row upper-margin\">\n                            <div className=\"col-lg-6 col-12\">\n                                <TagWise\n                                    handle={handleA}\n                                    problemTags={dataA.problemTags}\n                                />\n                            </div>\n                            <div className=\"col-lg-6 col-12\">\n                                <TagWise\n                                    handle={handleB}\n                                    problemTags={dataB.problemTags}\n                                />\n                            </div>\n                        </div>\n\n                        <DifficultyWise\n                            problemDifficulty={DifficultyWiseProblem(dataA.uniqueCorrectSubmissions, dataB.uniqueCorrectSubmissions, handleA, handleB)}\n                        />\n\n\n                    </div>\n                </div>\n\n            </Fragment>\n        );\n    }\n}\n\nexport default Compare;","import React, { Fragment, useState } from \"react\";\nimport Compare from \"./Compare\";\n\nconst InputTwoHandles = () => {\n    console.log(\"In handle Input\")\n\n    const [handleA, setHandleA] = useState(\"\");\n    const [handleB, setHandleB] = useState(\"\");\n\n    const [formData, setFormData] = useState({\n        handleA: \"\",\n        handleB: \"\",\n        isSubmitted: false\n    });\n\n    const onSubmit = e => {\n        e.preventDefault()\n\n        setFormData({\n            handleA: handleA,\n            handleB: handleB,\n            isSubmitted: true\n        }, console.log(\"Submitted\"))\n\n    }\n    //console.log(formData, handle)\n    return (\n        <Fragment>\n            <div className=\"row top-input-row\">\n\n\n                <span className=\"col-lg-6 col-12 top-row\">\n                        <input type=\"text\" className=\"form-control\" name=\"handleA\" placeholder=\"handleA\"\n                            value={handleA} onChange={e => setHandleA(e.target.value)} />\n                            <button type=\"submit\" className=\"btn btn-dark\" onClick={onSubmit}>Submit</button>\n                    \n                </span>\n                <div className=\"col-lg-6 col-12 top-row\">\n                        <input type=\"text\" className=\"form-control\" name=\"handleB\" placeholder=\"handleB\"\n                            value={handleB} onChange={e => setHandleB(e.target.value)} />\n                            <button type=\"submit\" className=\"btn btn-dark\" onClick={onSubmit}>Submit</button>\n\n                </div>\n            </div>\n            \n            {/* {<HandleData handle={\"saransh\"} />} */}\n            { formData.isSubmitted && <Compare handleA={formData.handleA} handleB={formData.handleB} />}\n            { !formData.isSubmitted && <div className=\"upper-margin\">Enter the handles you want to compare</div>}\n        </Fragment>\n\n    );\n\n}\n\n\nexport default InputTwoHandles;","import React, {Fragment} from \"react\";\nimport {InputHandle} from \"./InputHandle\";\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport NavBar from \"./Navbar\";\nimport Compare from \"./compare/index\"\nimport \"../index.css\";\n\nfunction App() {\n  console.log(\"In function App\");\n  return (\n    <div className=\"heading\">\n      <Router>\n        <Fragment>\n          <NavBar />\n          <Switch>\n            <Route exact path=\"/\" component={InputHandle} />\n            <Route exact path=\"/compare\" component={Compare} />\n          </Switch>\n        </Fragment>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}